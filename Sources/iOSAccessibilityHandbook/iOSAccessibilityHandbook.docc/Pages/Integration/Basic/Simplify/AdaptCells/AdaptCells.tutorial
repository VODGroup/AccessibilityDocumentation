@Tutorial(time: 20) {
    @Intro(title: "Simplifying Cells") {
        
        We've just learnt how to **describe** every possible **element** with [**Accessibility Attributes](<doc:AccessibilityAttributes>) to make them visible for [**Accessibility Features**](<doc:AccessibilityFeatures>). But the problem is that so far we've been defining element as a **singular independent item** of the interface.
        
        ## Complex cells
        Just as the main character of [previous tutorial](<doc:AccessibilityAttributes>) -- a *product card* -- there are many **combinations of multiple elements that are *perceived* as a whole**.
        
        In this tutorial we are going to research the phenomena of **complex cells** -- multiple elements used together to convey a *meaning* of an **integral item** of an interface.
    
        ### Assistive technology
        To have [**Accessibility Features**](<doc:AccessibilityAttributes>) work as *intended* sometimes it is needed to **simplify complex cells** to such degree so there is **no difference for accessibility features** between *differentiated abstractions* that are stored in such cells. 
        
        ### Accessibility representation
        In other words, we are going to learn how, why and when to **represent complex cells as a singular accessible element** and what to do with its **complicated functionality**.
        
        Let's start with an already familiar example.
        
    }
    
    @Sections(title: "A card as a complex cells") {
        @ContentAndMedia {
            This product card as a pattern built of multiple components of different types. It is done because a product card is purpose to display an object such way so it attracts customer's attention and gives a succinct preview without providing unnecessary for choice-making process details.  
            
            ### Multiple means of attraction
            As an interfacial components card is usually something of a heading label, its content's description, an illustration of previewing kind and an action that can be done to this card. The purpose of a card is to represent something among other cards and provide every information needed to distinguish this card from the others.
            
            ### Essential information
            Talking about product cards it is used to sell a certain product. Therefore the image must be attractive, label easily-recognizable and description must cover everything that may affect customers choice. In our choice it is ingredients and price, because people would prefer to know it as soon as possible.
        }
    }
    
    @Section(title: "Inaccessibility of complex cells") {
        @ContentAndMedia {
            Complex cells are easily recognised if not overwhelming with details and uncertainty of actions. But even the simplest basic cells must be treated with full seriousness if is about to become accessible.
            
            @Image(source: "chicken-bbq", alt: "Cell of Chicken BBQ containing an image, a title, ingredients and a price.")
        }
        
        @Steps {
            @Step {
                First of all, a complex cell is always a combination of multiple elements. If these elements are accessible, assistive technology will treat them as separate items. Such rendering causes two problems.
                                                
                > Important: Remember that **images are hidden from VoiceOver *by default***, therefore are *inaccessible* to be focused on.
                
                @Image(source: "chicken-bbq-label", alt: "Focus outlines the title of the cell first.")
            }
            
            @Step {
                First one is that it is hard for users to perceive these elements as a part of something whole. For example, listening to a list of inaccessible cards (but accessible elements) will lead to ambiguity of what inner elements are inherent by which objects. 
                
                @Image(source: "chicken-bbq-value", alt: "In our case, secondly the focus outlines the ingredients' list.")
            }
            
            @Step {
                Second one is that the order of elements is uncontrolled. Unless specified explicitly, a screen reader may read a product's price first and its identifier somewhere in the middle. Even more confusing than the previous issue, especially if the list is lengthy. 
                
                @Image(source: "chicken-bbq-price", alt: "Consequently the focus outlines the button with the price.")
            }
            
            @Step {        
                Moreover, fragmentation of cell's content leads to an increased amount of actions to be done to scroll the list. Your list is of 20 cards? Have 60 swipes to go through them all.
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_0.swift")
            }
            
            @Step {                
                Obviously such discretion leads to a decrease in *navgitableness* (sorry) of the interface: users can easily **lose track of what card in particular they are going through at the moment**. 
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_1.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines the button with the price.")
                }
            }
            
            @Step {                
                As an obvious example, in our card **the price button* may be perceived connected to the next title** which is something we really don't want to happen. Again, prices are commonly playing a critical role in decision-making processes.
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_2.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines the button with the price.")
                }
            }
            
            @Step {
                
                Extending on *action buttons*, there are indirect selection features such as [**Voice Control**](<doc:VoiceControl>), [**Switch Control**](<doc:SwitchControl>) and [**Full Keyboard Access*](<doc:FullKeyboardAccess>) that iterate through **interactive elements** and therefore *struggle* with fragmented layout. 
                
                @Image(source: "chicken-bbq-price-pronunciation", alt: "Voice Control shows the badge over the button with the price")
            }
            
            @Step {
                As a result of their behaviour **the only label shown will be the action button's *label***. To interact with the whole cell users would have to, for example, [**Voice Control**](<doc:VoiceControl>), pronounce *"Tap From AED thirty"* â€”-  which is a nonsense. 
            }
        }
    }
    
    @Section(title: "Accessible complex cells") {
        @ContentAndMedia {
            Accessibility description is all about **telling the user what's happening on the screen**. Let's do that with grace, even for complex cases.
            
            In order to **properly *describe*s the cell so VoiceOver can read it correctly** we have to transfer the text from *labels* to the *accessibility description* of the cell in a *correct order* and with a *correct type*. Let's try to do so.
            
            @Image(source: "cell-priority", alt: "Order in which elements are read is controlled by designers' vision.")
        }
        
        @Steps {
            @Step {
                Let's have an even more difficult card of Hawaiian pizza -- as a position from the cart.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_6.swift")
            }
            
            @Step {
                What do we have here? An image, a header, a description, 3 controls, 2 of which adjust the quantity and 1 quantity indicator.
            }
            
            @Step {
                The "Change" control represent the action performed if any point of the card is pressed unless precisely tapping at adjusting controls.
            }
            
            @Step {
                Let's see how the element will be iterated without accessibility adoption.
            }
            
            @Step {
                Yeah, sounds like a whole lotta work. But in reality the beast is not that scary. Especially if dealt step by step
            }
            
            @Step {
                First of all, we need to represent the card as a singular element. By making the whole cell focusable now there 5 times less accessible elements on the screen: because without joint focus the number of focusable elements was 5.
            }
            
            @Step {
                Now users can iterate through items in the cart, not their controls.
            }
            
            @Step {
                There is no need to explicitly hide inner elements -- making the cell an accessible element is enough. Remember that Accessibility API goes through contained elements only if the container is inaccessible.
            }
            
            @Step {
                Also notice that the frame outlines card's image. We know that images are hidden from Accessibility Features by default, but to enhance user experience of "blind" direct touch we've' extended the focusable area.
            }
            
            @Step {
                Now accessibility description. This we know how to do. As anticipated, the card's header will server as the **Label**. **Ingredients**, **price** and **quantity** will go to the **Value**.
                
                > Important: Don't forget about the importance of order.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_8.swift")
            }
            
            @Step {
                But what about type? The cell seems a button, but there is this stepper inside. How are we going to deal with the stepper at all?
            }
            
            @Step {
                But what about **Trait**? The cell seems a button, but there is this stepper inside. How are we going to deal with the stepper at all?
            }
            
            @Step {
                Relax, we got it. What we didn't get is that actually we missed one important point about the cell.
            }
            
            @Step {
                Talking about actions presented by this card, there is not only going to the product's page and changing properties, and adjusting quantity. There is a swipe that deletes the item from the cart.
            }
            
            @Step {
                Let's call such stunt a contextual action. Most of the lists on iOS have swipe-triggered contextual actions available for items. Delete, edit, archive, move, to spam, whatever -- these all represent an alternative of a context menu. 
            }
            
            @Step { 
                So the situation just got worse. Thankfully, there is something that will save us.
            }
            
            @Step {
                Custom Actions. Custom Actions is essentially an alternative form of context actions. If there is any specific action that can be done to an element and there is more than one of such action -- we use Custom Actions. Custom Actions solves the problems for us.
            }
            
            @Step {
                We have 3 actions possible to be performed with this card: 
                - change (main action, takes the user to the product's page);
                - adjust quantity (decrease and increase, that stepper);
                - remove the position at all (left swipe).
            }
            
            @Step {
                Implementing Custom Action will allow us to provide the access to all these three ways of interacting with the item.
            }
            
            @Step {
                First we write up the actions, then we add them to the Custom Actions of this accessible element.
            }
            
            @Step {
                Now users can choose the action they want to perform to the item in addition to default main one.
            }
            
            @Step {
                And that's basically it. We won't provide any explicit information in **Traits** attribute, but if you really want you can state that the card is a button because it is a button, though it has functionality of adjustable element due to one of the Custom Actions. 
                
                > Important: The absence of **Traits** is helpful for this particular cell. Think critically of necessity of this information to be specified.
            }
            
            @Step {
                But we shouldn't forget that it would be great if besides "Custom Actions available" appendix the user will hear a brief instructions of how to use them. 
            }
            
            @Step {
                Otherwise we are done and did great! We are nearly proficient in describing elements, and have learnt about Custom Actions -- a powerful tool in accessibility on iOS.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_10.swift")
            }
        }
    }

    @Section(title: GREAT JOB!) {
        @ContentAndMedia {
            This is only the second tutorial of the book and we've already learnt the most of basics in accessibility of iOS application. Please, don't get scared of the further studying: the next tutorial will wrap-up the foundation, and afterwards everything contained in the second volume is about everything we mentioned here but in much greater detail. 
            
            Now we know how to make the components of interfaces accessible. But interfaces consist of not only elements, there is also connections between them that make the interface meaningful. 
            
            That will be our next lesson, but before me move forward how about a little quiz of mastery? 
        }
    }

    
    @Assessments {
        @MultipleChoice {
            Choose the *most* fitting location for a *price* in a cell.
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ with image, title, ingredients and price")
            
            @Choice(isCorrect: false) {
                ```
                Label: Chicken BBQ, from 30 AED
                Value: pizza sauce, mushrooms...
                ```
                
                @Justification(reaction: "Try again!") {
                    **VoiceOver *doesn't* distinguish such pieces of data**, but **Voice Control *has to have* price as a value element** in order to use it correctly (as a button).
                }
            }
                    
                    
            @Choice(isCorrect: true) {
                ```
                Label: Chicken BBQ, 
                Value: from 30 AED, pizza sauce, mushrooms...
                ```
                        
                        
                @Justification(reaction: "That's right!") {
                    Voice Control has a *simple label* it wants, VoiceOver reads the price *before* the ingredients just as it should. Good job!
                }
            }
                            
                            
            @Choice(isCorrect: false) {
                ```
                Label: Chicken BBQ, 
                Value: pizza sauce, mushrooms..., from 30 AED
                ```
                
                @Justification(reaction: "That's right!") {
                    Almost there, but **such case would be a *wrong* ordered showcase strategy**. One has to know the price *before* the ingredients. Imagine having to listen to an endless list of mushrooms and only then be informed that it doesn't quite fit the budget.
                }                
            }
        }
        
        @MultipleChoice {
            What is **the default gesture for scrolling through a table** with VoiceOver?
            
            @Choice(isCorrect: false) {
                A regular swipe
                
                @Justification(reaction: "Try again!") {
                    Nope, ***vertical swipes* are used for *adjustable elements* and other <doc:Rotor> operations**. 
                    
                    For example, **swipe from the *bottom* will close the current application**, the one **from the *top* will open Notifications Screen or Control Center**.
                }
            }
                    
                    
            @Choice(isCorrect: false) {
                Two-fingers swipe
                        
                @Justification(reaction: "Try again!") {
                    **Two-finger swipe *up* describes the entire screen *from the top***. 
                    **Two-finger swipe *down* describes the entire screen *from the selected item***. 
                }
            }
                            
                            
            @Choice(isCorrect: true) {
                Three-fingers swipe
                                
                @Justification(reaction: "That's right!") {
                   Yep, this is it!
                   
                   If adapted *correctly*, the user will hear what is in the table without unnecessary for the moment information specified.
                }                
            }
            
            @Choice(isCorrect: false) {
                Four-fingers swipe
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, this is not the answer. Horizontal **four-fingers swipe switches between applications opened**.
                }                
            }
        }
    }
}
