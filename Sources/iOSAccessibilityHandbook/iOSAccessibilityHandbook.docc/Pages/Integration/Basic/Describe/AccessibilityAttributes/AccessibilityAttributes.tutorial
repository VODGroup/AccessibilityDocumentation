@Tutorial(time: 30) {
    
    @Intro(title: "Describing Interface for Accessibility API") {
        In this tutorial we're going to discuss unquestionably *the most* important thing to make an interface accessible — properly **describe its elements** for both users and assistive technology. 

        ## Importance of data exposure
        **Accessible description** of elements allows Accessibility API to deal with the interface: explicitly stating functionality of an element you enable different [**Accessibility Features**](<doc:AccessibilityFeatures>) to correctly *recognise* the **purpose** of components and therefore give them an appropriate **accessible representation**. 

        ### For users
        Moreover, accessible description is used to portray user interfaces in **different forms** than the "regular" one. Unless elements are properly described, an abstract user of [**VoiceOver**](<doc:VoiceOver>) who relies on **semantic structure** of the interface *only* will never be able to **figure out what is happening on the screen of their device**.

        ### For API
        Absence of description also affects methods of both **direct** and **indirect selection**: an element without description cannot be *called by name* with [**Voice Control**](<doc:VoiceControl>) or *recognised* by [**Switch Control**](<doc:SwitchControl>) or [**Full Keyboard Access**](<doc:FullKeyboardAccess>) to enable **elements iteration**.

        ## What elements are considered described?
        To enable [Accessibility Features](<doc:AccessibilityFeatures>) work as intended for a particular *element* it has to have *certain properties* specified. Sometimes elements inherit such information **by default** — if they are of an *accessible class* (children of the standard `View`), but **most of the times we have to manually set properties for the items present on the screen to make it not only *function*, but *be pleasant* to use**.

        ### Description of accessible elements
        To remind yourself how Accessibility API decides whether the element is **accessible** (therefore can have **accessible description**), take a step back to [**Accessibility in Code**](<doc:AccessibilityInCode>).

        ### Accessibility attributes
        On iOS accessible description is *composed* of four **accessible attributes**: **Label**, **Value**, **Traits** and **Hint**. Once you are ready to meet them, let's go out for some **accessibly described** pizza.
        
        @Image(source: attributes-order-7, alt: "")

    }

    @Section(title: "Label") {
        @ContentAndMedia {
            **Label** is the only **accessibility attribute** that **cannot be omitted**. In other words, **Label** is *required* to be specified for an element for it to be considered **accessible**.

            ### Identifying elements
            **Label** is the **main property** of the element's **accessible description**. It is essentially a unique identifier that is used by users to recognise this particular element as something singular. Represented by a **localised string**.
            
            ### Appropriate naming
            To be the best name for an element a **Label** must:
            - be as **short** as possible;
            - convey everything needed for users to be able to know **what this element is for**;
            - not contain any **detailed description** (to not double **Value**);
            - include any information referring to its **type** (to not double **Traits**);
            - be unique among the items of the current screen.
            
            Why? Let's figure out by choosing the pizza.

        }

        @Steps {
            @Step {
                The menu is a list of product cards. Each card is a complex element containing multiple interfacial elements, but our accessibility element is the whole card, because each of them represents a particular position in menu.
                @Image(source: attributes-hawaiian-1, alt: "")
            }

            @Step {
                We need to choose which pizza we're going to order. How are we going to refer to the pizza of our choice? 
                @Image(source: attributes-hawaiian-2, alt: "")
            }

            @Step {
                By its unique identifier, which in this case is "pizza name".
                @Image(source: attributes-hawaiian-3, alt: "")
            }
            @Step {
            In this particular case it is **unreasonable** to separate the fact that it's "name" and its name into two different properties. Every element in this menu is pizza. It would be an **inconvenient experience** for users.
            @Image(source: attributes-hawaiian-4, alt: "")
            }
            @Step {
                So just the name will be enough to distinguish this one out of the rest of the menu.
                @Code(name: "Label.swift", file: hawaiianLabel.swift) {
                    @Image(source: attributes-hawaiian-5, alt: "")
                }
            }
        }
    }

    @Section(title: "Value") {
        @ContentAndMedia {    

            ### Details
            Another accessibility attribute is **Value**. Basically, this property is used to store any *additional information* about the element that is unnecessary for **Label** to contain, i.e. excessive for element's identification. Also a **localised string**.

        }

        @Steps {
            @Step {
                Ok, Hawaiian pizza. But how did we make this choice? We didn't pick pizza based on how its name sounds.
                @Image(source: attributes-hawaiian-5, alt: "")

            }
            @Step {
                Accessibility **Value**. The first **optional** attribute on our path: if there is additional information about the element, but it's too much to be put in **Label**.
                @Image(source: attributes-hawaiian-5-and-half, alt: "")
            }

            @Step {
                Product card as a **pattern** has a lot of **additional information** that tells customers *more* about the product. Do we just move *everything* there?
                @Image(source: attributes-hawaiian-pseudo-6, alt: "")
            }

            @Step {
                Nope. Well, yes, but not exactly. Accessibility **Value** serves one purpose: **to describe an element to users of [**VoiceOver**](<doc:AccessibilityFeatures>)**. Without an explicitly stated **Value** they can't access this information any other way.
                @Image(source: attributes-hawaiian-6, alt: "")
            }
            
            @Step {
                Listening to an audial form (or touching Braille) of interfaces can be quiet exhausting. Moreover, interfaces may display information that is either **not valuable** at all (when an interface is unreasonably **cluttered**) or is only representable by **visual media**.
            }
            
            @Step {
                In our case there is this questionable **preview** of pizza. There is nothing wrong with willing to describe pizza, but we already have key **ingredients** listed in the card and it will be **sufficient** for this exact pizza **description**. 
                @Image(source: attributes-hawaiian-7, alt: "")
            }
            
            @Step {
                No photo of pizza. Yes ingredients. What about **the price**?
            }
            
            @Step {
                Descriptions tend to get *wordy*. Manipulating customers attention, selling pizza to [**VoiceOver**](<doc:VoiceOver>) users should follow the same marketing strategies as to everyone else.
                @Image(source: attributes-hawaiian-9, alt: "")
            }
            
            @Step {
                Whenever you have to put a lengthy description into **Value**, make sure you place its components **in the order of importance**. Some people would listen to the whole description to know whether there are pineapples in a pizza, but majority prefers to know the price first. Maybe it won't be pineapples to make a user not consider the pizza.
                @Image(source: attributes-hawaiian-8, alt: "")

            }

        }
    }

    @Section(title: "Label vs Value") {
        @ContentAndMedia {    
            ### Fine line between label and value
            To properly adapt an interface for various [**Accessibility Features**](<doc:AccessibilityFeatures>) one has to clearly differentiate between these two traits. For example, **Label** is heavily exploited by [**Voice Control**](<doc:VoiceControl>) and has to be **independent of unnecessary information** to avoid *ambiguity*. 
            
            In the meantime **Value** is that part of element's description that is changeable by [**AdjustableTrait**](<doc:AdjustableElements>)'s usage. 
        }
    }

    @Section(title: "Traits") {
        @ContentAndMedia {
            
            ## Functionality
            
            A value stored in **Traits** property points at the **functionality** of an element. 
            
            ### none
            By default it is `none` and means that **there is nothing you can do with this element**.
            
            ### staticText
            Though exactly same behaviour is implemented by explicitly stating `staticText` trait - it only exists for convenience so it is easier for humans to comprehend the role of the element. (Use it. Unless you indeed have elements of pure nothingness.)

            ### Interactive elements
            If an element has *more* than ~~none~~ purely textually-informative role **it has to be specified in this property** by stating one of **Traits** so both users and assistive technology know **what to do** with this item.

            To see the complete list of **Traits** available visit the [**appropriate tutorial**](<doc:Traits>) - it has a living example for each of them.

            @Video(source: traits-scroll)
        }

        @Steps {
            @Step {
                Hawaiian pizza, with price of 449 roubles and some pineapples -- the choice was made. How do we order it though?
            }

            @Step {
                To order the pizza we need to put this one to the cart. The actions of moving a certain product to the cart is the **main action** of this product element and it can be done by **performing a simple action** on it.
            }

            @Step {
                An interactive element that has no specific meaning (like those weird .playsSound and .causesPageTurn guys from [**Traits**](<doc:Traits>) tutorial) is a button. Yes, our product card... is... exactly a button. 
                @Image(source: attributes-hawaiian-10, alt: "")

            }

            @Step {
                **Button** trait will be the most common **type of controls** on your accessible elements path, so don't overestimate the power of this statement.
            }
        }
    }
            
    @Section(title: "Multiple traits") {
        @ContentAndMedia {
            But if there is more [**Traits**](<doc:Traits>) that are suitable to portray the type of our element? Like, what is Hawaiian pizza product card is indeed a button, but there is no pineapples available and therefore no pizza?
            
            ### OptionSet
            This is exactly why in UIKit **Trait** attribute is stated by using `OptionSet` **methods** and not as a **given value** as for other attributes. There may be *many* suitable traits and they may be set in accordance with the situation. For example, an abstract button will always be *a button*, but **whether it's available or not... is a conditional question**.
            
            ### -- Would multiple traits conflict with each other?
            Functionally -- no, it's just a description. The responsibility of giving an appropriate set of **Traits** is on you. **VoiceOver** knows how to deal with situations like this.
        }
        @Steps {
            @Step {
                To gain confidence of this, let's peep into our order summary. 
            }
            @Step {
                See this curious complex cell reviewing the place of our order? Let's hear its description. 
            }
            @Step {
                Selected. At pizzeria, Mikluho-Maklaya st., 36A. Unavailable, button. Double tap to activate
                @Image(source: attributes-order-1, alt: "")
                }
            @Step {
                THREE traits at once and everything is natural.
                @Image(source: attributes-order-2, alt: "")
            }
            @Step {
                Whether an item is selected or not is the most important users should hear first.
                @Image(source: attributes-order-3, alt: "")

            }
            @Step {
                Then we can deal with what exactly was selected: **Label**, a separating pause, **Value** of this element. 
                @Image(source: attributes-order-4, alt: "")

            }
            @Step {
                Traits time. Element is indeed a button, but an unavailable button is completely different story. State first.
                @Image(source: attributes-order-5, alt: "")

            }
            @Step {
                Aaand, after a short pause, a hint. Always the last. Wait. What hint?
                @Image(source: attributes-order-6, alt: "")

            }
        }
    }


    @Section(title: "Hint") {
        @ContentAndMedia {

            The last accessibility attribute. A localised string, again. **Hint** is a *description* of what happens if the user *interacts* with an element. But there is a tricky moment.

            ## Tricky moment
            *Every* standard interactive element has its own **Hint** specified **by default**. The problem is that these hints are *repetitive* and **majority of Accessibility Features users turn hints off** so there is very little chance that someone will ever see your *customised* hints. 

            ## Very little chance
            The reason why you should customise the hints for your controls is that if there are [**Custom Actions**](<doc:CustomActions>) available. A curious user will always enable hints for the introductory session with the app first time they open it to see **how *well* the application is adapted**. We adapt application **darn well**.
        }

        @Steps {
            @Step {
                Is there is anything to be written as a **Hint** for our product card? 
                @Image(source: attributes-hawaiian-5-and-half, alt: "")
            }

            @Step {
                At the moment no. Custom Actions are yet ahead and we have no idea how powerful we are in advanced accessibility functionality.
            }

            @Step {
                But we can write what we already know. Just to praise ourselves. 
                @Image(source: attributes-hawaiian-11, alt: "")
            }
        }
    }

    @Section(title: "Wrap-up") {
        @ContentAndMedia {
            Congratulations! Now you know everything needed to fully **describe elements for *both* users and assistive technology**. 
            
            ### -- Is that really all?
            Obviously the topic of **accessibility description** cannot be taught by a single example, even if it's a complicated one. But working on accessibility of applications will require you to **describe every single element** of its interfaces, so don't worry! We will cover as many **description cases** as possible through the course. **But the foundation is set.**
            
            ### NOW YOU KNOW:
            - how to succinctly identify elements and give them an accessible **Label**;
            - what details should be mentioned in its accessibility **Value**;
            - what **Traits** exist and why it is that crucial to specify them;
            - that anyone unlikely will appreciate your work on **Hints**, but we don't do it for appreciation.
            
            ### ... OR DON'T YOU?
            Find the truth about yourself by participating in this **quiz** of true expertise.
        }

    }
        
    @Assessments {
        @MultipleChoice {
            
            [**❤**](<doc:Traits>)
            
            What is this element?
            
            @Choice(isCorrect: false) {
                   A button
                   @Justification(reaction: "Try again!") {
                       No, it is a deadly sin to specify links as buttons. Buttons do something, links open links. 
                   }
            }
            
            @Choice(isCorrect: true) {
                   A link
                   @Justification(reaction: "That's right!") {
                       Yep. Definitely not a button.
                   }
            }
            
            @Choice(isCorrect: false) {
                   It's not even an element
                   @Justification(reaction: "Try again!") {
                       DocC doesn't allow images in quizzes, please be kind to involve your imagination.
                   }
            }
        }
        
        @MultipleChoice {
            Is this item accessible?

            @Choice(isCorrect: false) {
                Yes
                @Justification(reaction: "Try again!") {
                    text
                }
            }
              
            @Choice(isCorrect: true) {
                No
                @Justification(reaction: "That's right!") {
                    text
                }
            }
                    
            @Choice(isCorrect: false) {
                It is accessible, but the experience could be better
                @Justification(reaction: "Try again!") {
                    text
                }
        }
    }
}
