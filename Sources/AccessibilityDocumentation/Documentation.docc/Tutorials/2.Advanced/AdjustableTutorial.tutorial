@Tutorial(time: 10) {
    @Intro(title: "Setup adjustable elements") {
        Simplifies interactions with complex elements for VoiceOver.
    }
    
    @Section(title: "Basic setup") {
        @ContentAndMedia {
            By default any element can contains ``Book/accessibilityValue`` to expose additional data for user. Some elements come complicated and can contain dynamic value, controlled by vertical swipe. Examples:
        }
        
        @Steps {
            @Step {
                Accessible element can be marked by ``UIAccessibilityTraits_/adjustable`` trait to make ``Book/accessibilityValue`` dynamic. 
                
                @Code(name: "", file: "AdjustableTutorialStep_1.swift")
            }
            
            @Step {
                Accessible element can be marked by ``UIAccessibilityTraits_/adjustable`` trait to make ``Book/accessibilityValue`` dynamic. 
                
                @Code(name: "", file: "AdjustableTutorialStep_2.swift")
            }
            
            @Step {`
                As a result the element will react on vertical swipe by calling ``Book/accessibilityIncrement()`` and ``Book/accessibilityDecrement()``. 
                
                After each swipe the ``Book/accessibilityValue`` getter will be reread and the new value will be spoken out.
                
                > Note: `AccessibilityLabel wouldn't be read again after swipe`
                
                @Code(name: "", file: "AdjustableTutorialStep_3.swift")
            }
        }
    }
    
    @Section(title: "Backward compatibility") {
        @ContentAndMedia {
            Voice Control and Switch Control don't fit to adjustable elements and works best like separate buttons.
        }

        @Steps {  
            @Step {
                > Important: Adjustable elements is useful only for VoiceOver and will brake behaviour for Voice Control and Switch Control. 
                
                Distinguish behaviour in code by dynamic getter:
                
                @Code(name: "", file: "AdjustableTutorialStep_4.swift")
            }
            
            @Step {
                Switch Control requires grouping: first time focus will be placed on group, after selection will move between elements in group. As a result it simulates navigation by reducing number of elements on each level.
                
                > Note: Watch video [how grouping simplify navigation](https://youtube.com/shorts/1l8H615EkV0?si=tKyhIGjBbR9XG9HP)
                
                @Code(name: "", file: "AdjustableTutorialStep_5.swift")
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            What assistive technologies uses adjustable trait
            
            @Choice(isCorrect: false) {
                Switch Control
                
                
                @Justification(reaction: "Try again!") {
                    Switch Controls requires grouping, to simplify navigation, but uses ``Book/accessibilityNavigationStyle`` for that.
                }
            }
                      
            @Choice(isCorrect: true) {
                VoiceOver
                        
                        
                @Justification(reaction: "That's right!") {
                    Blind person would like to reduce number of elements on screen and simplify interactions by vertical swipe to adjust the value of the element
                }
            }
                            
            @Choice(isCorrect: false) {
                Voice Control
                                
                                
                @Justification(reaction: "Try again!") {
                    Voice Control uses person who can see and they prefer to see elements as separate buttons
                }
            }
        }
    }
}
