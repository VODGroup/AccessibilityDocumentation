@Tutorial(time: 10) {
    @Intro(title: "Adopting cell") {
    
        Common case when a cell become accessible element and combine all data in its description. For example we have a cell with pizza's description: image, title, ingredients and price. We can dramatically simplify cell for VoiceOver
        
        
    }
    
    @Section(title: "The point") {
        @ContentAndMedia {
            Cell looks simple, but straitforward layout leads to several accessibility issues
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ with image, title, ingredients and price")
        }
        
        @Steps {
            @Step {
                Let's start from VoiceOver problems. 
                
                First of all focus outlines ever separate element in cell. 
                Image is hidden from VoiceOver by default (and it's fine), and first focused element is cell. 
                
                @Image(source: "DescribeCell_1", alt: "Focus outlines title")
            }
            
            @Step {
                After swipe to the right focus moves to ingredients
                
                @Image(source: "DescribeCell_2", alt: "Focus outlines ingredients")
            }
            
            @Step {
                Next swipe move focus to the button with price. 
                
                > None: Only here user can understand, that it is interactive element by hearing `.button` trait
                
                @Image(source: "DescribeCell_3", alt: "Focus outlines button with price")
            }
            
            @Step {                
                In the end user had to do three swipes to passthrough just one cell. 
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_0.swift")
            }
            
            @Step {                
                Moreover, when he swipes through several steps he can lose his understanding which element connects to which pizza, ingredients will be repetitive and etc
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_1.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines button with price")
                }
            }
            
            @Step {                
                For e.g. price button may looks connected to next title.
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_2.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines button with price")
                }
            }
            
            @Step {
                Voice Control and Switch Control have problems too. They works with interactive buttons, as a result label will be shown only for price button and user had to pronounce `Tap From AED thirty` to press the cell. 
                
                > Tip: It would be much better, if we use title as cell's label. 
                
                @Image(source: "DescribeCell_4", alt: "Voice Control show badge over button with price")
            }
        }
    }
    
    @Section(title: "Describe cell") {
        @ContentAndMedia {
            Let's fix this problem
            
            @Image(source: "DescribeCell_9_preview", alt: "Reading order is controlled by designer")
        }
        
        @Steps {
            @Step {
                Start from simple cell with explicit ViewModel.
                
                @Code(name: "Cell and VoiceOver", file: "DescribeCell_6.swift")
            }
            
            @Step {
                First of all we should set that the cell will be focusable element. As a result we reduce number of elements on screen.
                
                No need to explicitly hide other elements, specifying the cell as accessibleElements it enough, read <doc:ControlHierarchy> for details.
                
                @Comment {
                    // TODO: why the cell's button is visible at pizza?
                }
                
                @Code(name: "Cell and VoiceOver", file: "DescribeCell_7.swift")
            }
            
            @Step {
                The cell has no info about its label, use `title` as `accessibilityLabel` and `ingredients` as `accessibilityValue`
                
                @Code(name: "Cell and VoiceOver", file: "DescribeCell_8.swift")
                
                @Comment {
                    // TODO: Add Voice Control screenshot
                }
            }
            
            @Step {
                Price is important part of the cell, but we had to choose how to describe it. We can notice, that visual perception of order is controlled by designer: image attracts attention first; eyesight moves to title: it's on top and bold; bright colored button interrupts attention order and point to itself after title; ingredients is last point of attention: it's grey, long and boring
                
                As a result we can place price after title. But, we had keep `label` simple and place price at the beginning of `accessibilityValue`
                
                @Code(name: "Cell and VoiceOver", file: "DescribeCell_9.swift") {
                    @Image(source: "DescribeCell_9_preview", alt: "Reading order is controlled by designer")
                }
            }
            
            @Step {
                In the end we should describe that element is interactive. Specify `.button` trait for that.
                
                @Code(name: "Cell and VoiceOver", file: "DescribeCell_10.swift")
            }
        }
    }
    
    @Section(title: "Simplify scroll") {
        @ContentAndMedia {
            Let's fix this problem
            
            @Image(source: "DescribeCell_3_3", alt: "Focus outlines button with price")
        }
        
        @Steps {
            @Step {
                <#text#>
                
                @Image(source: <#file#>, alt: "<#accessible description#>")
            }
            
            @Step {
                <#text#>
                
                @Code(name: "<#display name#>", file: <#filename.swift#>)
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            What element did you use to add space around and between your views?
            
            
            @Choice(isCorrect: false) {
                A state variable.
                
                
                @Justification(reaction: "Try again!") {
                    Remember, it's something you used to arrange views vertically.
                }
            }
                    
                    
            @Choice(isCorrect: true) {
                A VStack with trailing padding.
                        
                        
                @Justification(reaction: "That's right!") {
                    A VStack arranges views in a vertical line.
                }
            }
                            
                            
            @Choice(isCorrect: false) {
                                
                                ...
                                
            }
        }
    }
}

