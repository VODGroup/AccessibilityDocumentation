@Tutorial(time: 10) {
    @Intro(title: "Adopting cell") {
    
        Common case when a cell become an accessible element and combine all data in its description. For example we have a cell with pizza's description: image, title, ingredients and price. We can dramatically simplify cell for VoiceOver
        
        
    }
    
    @Section(title: "The point") {
        @ContentAndMedia {
            Cell looks simple, but straitforward layout leads to several accessibility issues
            @Comment { }
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ with image, title, ingredients and price")
        }
        
        @Steps {
            @Step {
                Let's start from VoiceOver problems. 
                
                First of all focus outlines ever separate element in cell. 
                Image is hidden from VoiceOver by default (and it's fine), and first focused element is cell. 
                
                @Image(source: "DescribeCell_1", alt: "Focus outlines title")
            }
            
            @Step {
                After swipe to the right focus moves to ingredients
                
                @Image(source: "DescribeCell_2", alt: "Focus outlines ingredients")
            }
            
            @Step {
                Next swipe move focus to the button with price. 
                
                > None: Only here user can understand, that it is interactive element by hearing `.button` trait
                
                @Image(source: "DescribeCell_3", alt: "Focus outlines button with price")
            }
            
            @Step {                
                In the end user had to do three swipes to passthrough just one cell. 
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_0.swift")
            }
            
            @Step {                
                Moreover, when he swipes through several steps he can lose his understanding which element connects to which pizza, ingredients will be repetitive and etc
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_1.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines button with price")
                }
            }
            
            @Step {                
                For e.g. price button may looks connected to next title.
                
                @Code(name: "Several cells and wrong rhyme", file: "DescribeCell_3_2.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines button with price")
                }
            }
            
            @Step {
                Voice Control and Switch Control have problems too. They works with interactive buttons, as a result label will be shown only for price button and user had to pronounce `Tap From AED thirty` to press the cell. 
                
                > Tip: It would be much better, if we use title as cell's label. 
                
                @Image(source: "DescribeCell_4", alt: "Voice Control show badge over button with price")
            }
        }
    }
    
    @Section(title: "Describe cell") {
        @ContentAndMedia {
            To properly describe the cell for VoiceOver we had to transfer text from labels to accessibility description of the cell in correct order and with correct type.
            
            @Image(source: "DescribeCell_9_preview", alt: "Reading order is controlled by designer")
        }
        
        @Steps {
            @Step {
                Start from simple cell with explicit ViewModel.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_6.swift")
            }
            
            @Step {
                First of all we should set that the cell will be focusable element. As a result we reduce number of elements on screen.
                
                No need to explicitly hide other elements, specifying the cell as accessibleElements it enough, read <doc:ControlHierarchy> for details.
                
                @Comment {
                    // TODO: why the cell's button is visible at pizza?
                }
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_7.swift")
            }
            
            @Step {
                The cell has no info about its label, use `title` as `accessibilityLabel` and `ingredients` as `accessibilityValue`
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_8.swift")
                
                @Comment {
                    // TODO: Add Voice Control screenshot
                }
            }
            
            @Step {
                Price is important part of the cell, but we had to choose how to describe it. We can notice, that visual perception of order is controlled by designer: image attracts attention first; eyesight moves to title: it's on top and bold; bright colored button interrupts attention order and point to itself after title; ingredients is last point of attention: it's grey, long and boring
                
                As a result we can place price after title. But, we had keep `label` simple and place price at the beginning of `accessibilityValue`
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_9.swift") {
                    @Image(source: "DescribeCell_9_preview", alt: "Reading order is controlled by designer")
                }
            }
            
            @Step {
                In the end we should describe that element is interactive. Specify `.button` trait for that.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_10.swift")
            }
        }
    }
    
    @Section(title: "Simplify scroll") {
        @ContentAndMedia {
            How default scroll works for VoiceOver: user scrolls by **three-finger swipe**, VoiceOver reads number of visible pages: `4 from 20.`
            
            If we work with table of cells VoiceOver specify number of visible rows: `From 25 to 40 from 120`
            
            We can improve even this by providing description for visible area, just read all titles of products: `Chicken BBQ, Meat King Supreme, Hawaii`
            
            @Image(source: "DescribeCell_11", alt: "Describe screen after scroll")
        }
        
        @Steps {
            @Step {
                Let's start from MenuViewController's extension
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_11_0.swift")
            }
            
            @Step {
                To add description we use special `UIScrollViewAccessibilityDelegate` that can be implement at any `firstResponder`.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_11.swift")
            }
            
            @Step {
                Our goal is providing text description for visible cells. We can start from visible path
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_12.swift")
            }
            
            @Step {
                Convert them to models
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_13.swift")
            }
            
            @Step {
                And extract titles 
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_14.swift")
            }
            
            @Step {
                Join in single row in the end, separating by comma.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_15.swift")
            }
            
            @Step {
                After three-finger swipe titles of visible elements will be spoken aloud.
             
                Also you can add quantity expectation after 
             
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_16.swift")
                
                @Comment {
                    // TODO: Add preview
                }
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            How do you place price in the element
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ with image, title, ingredients and price")
            
            @Choice(isCorrect: false) {
                ```
                Label: Chicken BBQ, from 30 AED
                Value: pizza sauce, mushrooms...
                ```
                
                @Justification(reaction: "Try again!") {
                    There in no difference for VoiceOver, but Voice Control presents price as part of the name that should be pronounced. To hard for Voice Control.
                }
            }
                    
                    
            @Choice(isCorrect: true) {
                ```
                Label: Chicken BBQ, 
                Value: from 30 AED, pizza sauce, mushrooms...
                ```
                        
                        
                @Justification(reaction: "That's right!") {
                    Voice Control will have simple label, VoiceOver will read price in front of ingredients because it's more important
                }
            }
                            
                            
            @Choice(isCorrect: false) {
                
                ```
                Label: Chicken BBQ, 
                Value: pizza sauce, mushrooms..., from 30 AED
                ```
                
                @Justification(reaction: "That's right!") {
                    It's too long to wait for the price when you listen VoiceOver
                }                
            }
        }
        
        @MultipleChoice {
            How to scroll down a table when VoiceOver enabled?
            
            @Choice(isCorrect: false) {
                Just regular swipe up
                
                @Justification(reaction: "Try again!") {
                    No, vertical swipe is used for adjustable elements and other <doc:Rotor> operations. Swipe from the bottom will close an application, from the top will open Notifications Screen or Control Center 
                }
            }
                    
                    
            @Choice(isCorrect: false) {
                Two finger swiper
                        
                @Justification(reaction: "That's right!") {
                    Two-finger swipe up will speak the entire screen *from the top*    
                    Two-finger swipe down will speak the entire screen *from the selected item*    
                }
            }
                            
                            
            @Choice(isCorrect: true) {
                Three finger swipe
                                
                @Justification(reaction: "That's right!") {
                    It's too long to wait for the price when you listen VoiceOver
                }                
            }
            
            @Choice(isCorrect: false) {
                For finger swipe
                
                @Justification(reaction: "That's right!") {
                    Horizontal four finger swipe will change applications 
                }                
            }
        }
    }
}
