@Tutorial(time: 10) {
    @Intro(title: "Adapting Cell") {
    
        To have **Accessibility Features** work as intented sometimes it is needed to **simplify complex cells** to such degree so there is no difference for accessibility features between *differentiated abstractions* that are stored in cells. 
        
        In other words, if there is a cell with pizza's description it is reasonable to distinguish data by its nature: have an image as an illustration, a title, a list of ingridients and a price - but it complicates the work for VoiceOver, Voice Control and Switch Control. 
        
        Such detailed layout makes automated adaption of the cell's contents **wrong**. 
        
        Let's take a look of **what can be done to help our digital assistants navigate through the cognitive models we come up with**.
        
    }
    
    @Section(title: "What Is Wrong With The «Normal» Layout") {
        @ContentAndMedia {
            Even though the cell looks simple it is not enough — such layout would lead to several *accessibility issues*. Let's see **how exactly different Accessibility Features *struggle* with that**.
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ containing an image, a title, ingredients and a price.")
        }
        
        @Steps {
            @Step {
                Firstly, **there is a definite problem for *VoiceOver* to adapt such interfaces**.
                
                The thing is that **the focus works such way so it outlines *every* single element of a cell starting from *the title***.
                                                
                > Note: Pay attention that **images are hidden from VoiceOver *by default***, therefore are *inaccessible* to be focused on.
                
                @Image(source: "DescribeCell_1", alt: "Focus outlines the title of the cell first.")
            }
            
            @Step {
                After a swipe to the right (which triggers **moving to the next element**) the focus moves to **the list of ingredients**.
                
                @Image(source: "DescribeCell_2", alt: "In our case, secondly the focus outlines the ingredients' list.")
            }
            
            @Step {
                Same way the consequent swipe will move the focus to **the price button**. 
                
                > Note: The *only* possibility **for a user to understand that this element is interactive by hearing VoiceOver say that's it's a *button***. It can be made possible by **specifying its `.button` *trait***.
                
                @Image(source: "DescribeCell_3", alt: "Consequently the focus outlines the button with the price.")
            }
            
            @Step {                
                Overall the number of the swipes needed to go through a single cell is three. This is way *too* many: never forget that we're talking about a list of pizzas and **each pizza is an *independent* cell**. 
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_0.swift")
            }
            
            @Step {                
                Moreover such discretion leads to a decrease in *comrehensibility*: users can easily **lose track of what pizza in particular they are going through at the moment**. 
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_1.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines the button with the price.")
                }
            }
            
            @Step {                
                For example, **the price button* may be percieved connected to the next title** which is something we really don't want to have. Normally prices are playing a critical role in choice-making.
                
                @Code(name: "Several Cells, Wrong Rhyme", file: "DescribeCell_3_2.swift") {
                    @Image(source: "DescribeCell_3_3", alt: "Focus outlines the button with the price.")
                }
            }
            
            @Step {
                
                Talking about *price buttons*, there are ***Voice Control* and *Switch Control* that prioritise *interactive buttons*** and thus *struggle* with such layout too. As a result of their adapting behaviour **the only label shown will be the price button's *label***. To press the whole cell users would have to, for example, pronounce *«Tap From AED thirty»* — which is a nonsense.
                
                > Tip: The solution here is to **use *the title* as the cell's *label***.
                
                @Image(source: "DescribeCell_4", alt: "Voice Control shows the badge over the button with the price")
            }
        }
    }
    
    @Section(title: "What Can Be Done: Cell's Description") {
        @ContentAndMedia {
            *VoiceOver's adaption* is all about **telling the user what's happening on the screen**.
            
            In order to **properly *describe* the cell so VoiceOver can read it correctly** we have to transfer the text from *labels* to the *accessibility description* of the cell in a *correct order* and with a *correct type*. Let's try to do so.
            
            @Image(source: "DescribeCell_9_preview", alt: "Order in which elements are read is controlled by designers' vision.")
        }
        
        @Steps {
            @Step {
                We will start with a simple cell with an *explicit* `ViewModel`.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_6.swift")
            }
            
            @Step {
                First of all we have to **specify that the cell will be a *focusable element***. By doing that we ***reduce* the number of elements available on the screen**, which is, as you remember from the previous section, really helpful for *adaption*.
                
                There is no need to *explicitly* hide other elements - setting the cell with `accessibleElements` property is enough. 
                
                To see **how it works *exactly*** take a look at <doc:ControlHierarchy> where everything is explained in *greater* detail than we can afford in *tutorials*.
                
                @Comment {
                    // TODO: why the cell's button is visible at pizza?
                }
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_7.swift")
            }
            
            @Step {
                As mentioned previously **the title** will take place in `accessibilityLabel`. **Ingredients** go to the `accessibilityValue` property.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_8.swift")
                
                @Comment {
                    // TODO: Add Voice Control screenshot
                }
            }
            
            @Step {

                Not to forget there is also *the price* which is **an *essential* part of cells with a *product offer***.
                
                To adapt it *correctly* we need to follow the strategy controlled by *the cell's design* whose concept is to make users *notice* the product.
                
                Its **image is what *attracts the attention***, then **title is read and understood *loud and clear*** - it's on top and visually distinguished by a *bolder* font used. 
                
                Furtherly the attention may be *interrupted* by a **bright coloured button**.
                
                **Ingredients are least prior** to the attention and this is in their nature: this elements is of an *informative matter*, therefore not about *attention attraction*.
                
                Logically **we place the price *after* the title**. Pay attention that **to keep label simple the price has to be put in the beginning of `accesibilityValue`**.
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_9.swift") {
                    @Image(source: "DescribeCell_9_preview", alt: "Reading order is controlled by people who want to sell this pizza to you.")
                }
            }
            
            @Step {
                Everything is *described* and VoiceOver is happy, but *most importantly* we shouldn't forget to **mark the interactive element with `.button` trait*. 
                
                After that *specifying* we are done and did great!
                
                @Code(name: "Cell and VoiceOver.swift", file: "DescribeCell_10.swift")
            }
        }
    }
    
    @Section(title: "What Can Be Done: Ease Scrolling") {
        @ContentAndMedia {
            In VoiceOver the **default *scrolling* is implemented by a *three-finger swipe***. The gesture will announce where the user currectly is, i.e. VoiceOver will **read the number of the *visible* page**. For example, *«4 out of 20*».
            
            **Going through *tables* of cells functions *exactly* the same way**. For example, *«from 25 to 40 out of 120»* will be said during going over the rows.
            
            Seemingly there is not much we can do to **simplify the scrolling**, but in reality technologies win. People who are responsible of these inventions are indeed smart, aren't they? So:
            
            **Providing *description* for *visible* area allows to use *commands* that increase the *precision* of actions desired to be done**. Like, for example, *asking to read all titles* of the products which would result in hearing *«Chicken BBQ, Meat King Supreme, Hawaii»*. 
            
            @Image(source: "DescribeCell_11", alt: "Describe the screen after a scroll.")
        }
        
        @Steps {
            @Step {
                To **implement *comfortable* user experience** regardless of the fact that the interface is *adapted*, let's start with `MenuViewController` extension.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_11_0.swift")
            }
            
            @Step {
                We will use `UIScrollViewAccessibilityDelegate` to **add *description* that can be used by any `firstResponder`**.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_11.swift")
            }
            
            @Step {
                Which means we will **provide description for *all* visible cells**. Sounds exhausting, but is it so in reality? Let's try and see.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_12.swift")
            }
            
            @Step {
                To start we **convert *cells* to *models***.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_13.swift")
            }
            
            @Step {
                From models **the *titles* can be easily extracted** — we do so.
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_14.swift")
            }
            
            @Step {
                Once we get the titles we join them in *a single row*, separated by *commas*. 
                
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_15.swift")
            }
            
            @Step {
                And, as a result, **three-finger swipe will cause the *titles* to be listed outloud**. 
                
                We are happy, VoiceOver is happy, but, most importantly, the user would not have to do anything unnecessary to see what's available on the menu. Congratulations!
             
                @Comment {
                    //   Additionally you can add some quantity expectation after everything described above is done.
                    // TODO: михаил рубанов что ты делаешь. что ты хочешь сказать строкой сверху. 
                }
             
                @Code(name: "Describe screen after scroll.swift", file: "DescribeCell_16.swift")
                
                @Comment {
                    // TODO: Add preview
                }
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            Choose the *most* fitting location for a *price* in a cell.
            
            @Image(source: "Chicken BBQ", alt: "Cell of Chicken BBQ with image, title, ingredients and price")
            
            @Choice(isCorrect: false) {
                ```
                Label: Chicken BBQ, from 30 AED
                Value: pizza sauce, mushrooms...
                ```
                
                @Justification(reaction: "Try again!") {
                    **VoiceOver *doesn't* distinguish such pieces of data**, but **Voice Control *has to have* price as a value element** in order to use it correctly (as a button).
                }
            }
                    
                    
            @Choice(isCorrect: true) {
                ```
                Label: Chicken BBQ, 
                Value: from 30 AED, pizza sauce, mushrooms...
                ```
                        
                        
                @Justification(reaction: "That's right!") {
                    Voice Control has a *simple label* it wants, VoiceOver reads the price *before* the ingredients just as it should. Good job!
                }
            }
                            
                            
            @Choice(isCorrect: false) {
                ```
                Label: Chicken BBQ, 
                Value: pizza sauce, mushrooms..., from 30 AED
                ```
                
                @Justification(reaction: "That's right!") {
                    Almost there, but **such case would be a *wrong* ordered showcase strategy**. One has to know the price *before* the ingredients. Imagine having to listen to an endless list of mushrooms and only then be informed that it doesn't quite fit the budget.
                }                
            }
        }
        
        @MultipleChoice {
            What is **the default gesture for scrolling through a table** with VoiceOver?
            
            @Choice(isCorrect: false) {
                A regular swipe
                
                @Justification(reaction: "Try again!") {
                    Nope, ***vertical swipes* are used for *adjustable elements* and other <doc:Rotor> operations**. 
                    
                    For example, **swipe from the *bottom* will close the current application**, the one **from the *top* will open Notifications Screen or Control Center**.
                }
            }
                    
                    
            @Choice(isCorrect: false) {
                Two-fingers swipe
                        
                @Justification(reaction: "Try again!") {
                    **Two-finger swipe *up* describes the entire screen *from the top***. 
                    **Two-finger swipe *down* describes the entire screen *from the selected item***. 
                }
            }
                            
                            
            @Choice(isCorrect: true) {
                Three-fingers swipe
                                
                @Justification(reaction: "That's right!") {
                   Yep, this is it!
                   
                   If adapted *correctly*, the user will hear what is in the table without unnecessery for the moment information specified.
                }                
            }
            
            @Choice(isCorrect: false) {
                Four-fingers swipe
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, this is not the answer. Horizontal **four-fingers swipe switches beetwen applications opened**.
                }                
            }
        }
    }
}
